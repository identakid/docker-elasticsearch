# Elasticsearch configuration file #

# Path to directory where to store index data allocated for this node.
# Can optionally include more than one location, causing data to be striped across
# the locations (a la RAID 0) on a file level, favouring locations with most free
# space on creation. For example:
#path.data: /opt/elasticsearch/$inst/data1,/opt/elasticsearch/$inst/data2
path.data: /esvol/data
# Path to log files:
path.logs: /esvol/logs
# Path to where plugins are installed:
#path.plugins: /esvol/plugins
# Path to temporary files:
path.work: /esvol/work
#network.host: ES_NETWORK_HOST
#network.publish_host: ES_NETWORK_PUBLISH_HOST
#network.bind_host: ES_NETWORK_BIND_HOST
# Cluster name identifies your cluster for auto-discovery. If you're running
# multiple clusters on the same network, make sure you're using unique names.
#cluster.name: es01
#node.data: ES_NODE_DATA
#node.master: ES_NODE_MASTER
# Node names are generated dynamically on startup, so you're relieved
# from configuring them manually. You can tie this node to a specific name:
#node.name: ES_NODE_NAME
#http.enabled: ES_HTTP_ENABLED
# Allow recovery process after N nodes in a cluster are up:
#gateway.recover_after_nodes: ES_RECOVER_AFTER_NODES
# Set the timeout to initiate the recovery process, once the N nodes
# from previous setting are up (accepts time value):
#gateway.recover_after_time: 5m
# Set how many nodes are expected in this cluster. Once these N nodes
# are up (and recover_after_nodes is met), begin recovery process immediately
# (without waiting for recover_after_time to expire):
#gateway.expected_nodes: 2
http.cors.enabled: true
http.cors.allow-origin: "*"
# Disable multicast discovery:
#discovery.zen.ping.multicast.enabled: ES_MULTICAST_ENABLED
# Configure an initial list of master nodes in the cluster
# to perform discovery when new nodes (master or data) are started:
#discovery.zen.ping.unicast.hosts: ES_UNICAST_HOSTS
#discovery.zen.ping.unicast.hosts: [{{ range getvs "/services/logging/es/host/*" }}"{{.}}"{{ end }}]
#discovery.zen.minimum_master_nodes: ES_MINIMUM_MASTER_NODES
# Elasticsearch performs poorly when JVM starts swapping so ensure that
# it _never_ swaps.
# Set this property to true to lock the memory:
bootstrap.mlockall: true

# AWS configurations
#cloud.aws.access_key: AWS_ACCESS_KEY
#cloud.aws.secret_key: AWS_SECRET_KEY
#cloud.node.auto_attributes: true
#discovery.type: ec2
#gateway.type: s3
#repositories.s3.bucket: AWS_S3_BUCKET
#network.publish_host: ES_PUBLISH_HOST
#cloud.aws.region: AWS_REGION

script.disable_dynamic: true
action.disable_delete_all_indices: true
